How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It helped by showing me the difference in certain lines of code and thus made it easier
	to spot where the bug was located. This made the process of fixing the bug take a few
	minutes rather than hours.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You can track any version of your program and overcome bugs introduced in your program easily.
	You can also see what changes others made in the program in the part they're developing
	and know what was the purpose of each commit they made which makes it easier to know
	the process of how they developed the program.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The pros include that you have more control over your program's repository and can modify
	it deliberately while when using Google docs your commits may end up being illogical.
	The cons include that you have to put in some effort to manually save every version as 
	a commit while when using Google docs this process is automatic.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    That's because Git is specifically used for programming environments mostly. When dealing
	with repositories which include code, the files usually interact with each other which makes
	it preferable to save te full version of your program at each point of time rather than
	saving a single file.

How can you use the commands git log and git diff to view the history of files?

    You can use git log to view the entire history of the repository including all its commits.
	You can use git diff in order to view the difference between any two commits to compare
	their contents.

How might using version control make you more confident to make changes that
could break something?

    By using version control I can commit a working version of my project and take big risks
	by modifying my code without having to worry about breaking it or that it wouldn't run
	after those modifications since using version control I know I have the working version
	and can go back to it whenever I want to.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use it in my personal projects and any probably most of the programs I will
	work on in the future.